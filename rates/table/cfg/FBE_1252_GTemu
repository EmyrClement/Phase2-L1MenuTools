#format is like this:
#typeOfParameter :: parameterOrObjectName :: option1=value2; option2=(this,is,a,list)


## general options
## -----------------------------------------------------------
variable :: bundledate       :: GTemu_11seeds_allScalings_10x
variable :: nBunches         :: 2760
variable :: revFreq          :: 11246

#variable :: tiers            :: (variations)
variable :: tiers            :: (thresholds)

variable :: varBins          :: (30,50)
#variable :: varBins          :: (10,20,30,40,50,60,70,80,90,100)
##variable :: varBins          :: (100,140,275,425,575,700,850,1000)
variable :: varError         :: 0.2
variable :: varInterpol      :: linear
variable :: varLeg           :: 1
variable :: varCut           :: 1
variable :: varPrecision     :: 2
variable :: varIterations    :: 5
variable :: useNominalBwF    :: False



## samples (always all samples are used!)
## -----------------------------------------------------------

sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/MinBias_TuneCP5_14TeV-pythia8/MinBias_1252_200PU_crb_v27_PU200/230213_192753/0000/L1NtuplePhaseII_Step1_10.root; tree:=l1PhaseIITree/L1PhaseIITree
#sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/MinBias_TuneCP5_14TeV-pythia8/MinBias_1252_200PU_crb_v27_PU200/230213_192753/0000/L1NtuplePhaseII_Step1_11.root; tree:=l1PhaseIITree/L1PhaseIITree
#sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/MinBias_TuneCP5_14TeV-pythia8/MinBias_1252_200PU_crb_v27_PU200/230213_192753/0000/L1NtuplePhaseII_Step1_12.root; tree:=l1PhaseIITree/L1PhaseIITree
#sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/MinBias_TuneCP5_14TeV-pythia8/MinBias_1252_200PU_crb_v27_PU200/230213_192753/0000/L1NtuplePhaseII_Step1_13.root; tree:=l1PhaseIITree/L1PhaseIITree


## physics objects at trigger level
## -----------------------------------------------------------

## Electrons and Photons
object :: EG           :: basebranch:=EG        ; variables:=(Et,Eta,Phi,Iso,zVtx,PassesEleID,PassesSaID,HwQual); \
			  leading:=Et; lengthbranch:=nEG; onToOff:=0

object :: tkElectron   :: basebranch:=tkElectron      ; variables:=(Et,Eta,Phi,TrkIso,zVtx,PassesEleID,HwQual); \
			  leading:=Et; lengthbranch:=nTkElectrons; onToOff:=0

object :: tkPhoton     :: basebranch:=tkPhoton      ; variables:=(Et,Eta,Phi,TrkIso,TrkIsoPV,zVtx,PassesEleID,PassesPhoID,HwQual); \
			  leading:=Et; lengthbranch:=nTkPhotons; onToOff:=0

## Muons
#object :: tkMu          :: basebranch:=tkMuon    ; variables:=(Pt,Eta,Phi,Chg,Iso,TrkIso,Qual,zVtx,MuRefPt,MuRefEta,MuRefPhi,Region,Qual); \
#			   leading:=Pt; lengthbranch:=nTkMuons; onToOff:=0

object :: tkGmtMu          :: basebranch:=gmtTkMuon    ; variables:=(Pt,Eta,Phi,Chg,Iso,Qual,Z0); \
			   leading:=Pt; lengthbranch:=nGmtTkMuons; onToOff:=0

## Taus
object :: puppiTau     :: basebranch:=nnTau     ; variables:=(Et,Eta,Phi,PassLooseNN,PassTightNN); \
			  leading:=Et; lengthbranch:=nNNTaus; onToOff:=0

object :: caloTau      :: basebranch:=caloTau     ; variables:=(Et,Eta,Phi); \
			  leading:=Et; lengthbranch:=nCaloTaus; onToOff:=0

## Jets
object :: puppiJet     :: basebranch:=phase1PuppiJet  ; variables:=(Et,Eta,Phi); \
			  leading:=Et; lengthbranch:=nPhase1PuppiJets; onToOff:=0

## HT
object :: puppiHt      :: basebranch:=phase1PuppiHT   ; variables:=(Et=); \
			  leading:=Et; isFlat:=True; fixedIndex:=0; onToOff:=0

object :: puppiMHt      :: basebranch:=phase1PuppiMHT   ; variables:=(Et,Phi); \
			  leading:=Et; isFlat:=True; onToOff:=0

## MET
object :: puppiMet     :: basebranch:=puppiMET    ; variables:=(Et,Phi); \
			  leading:=Et; isFlat:=True; onToOff:=0

## zVtx
object :: puppiVtx     :: basebranch:=z0L1TkPV  ; variables:=(Et=); \
			  leading:=Et; isFlat:=True; onToOff:=0




## function aliases
## -----------------------------------------------------------
function :: notMatched       :: args:=(eta1,eta2,phi1,phi2); lambda:= math.sqrt(math.pow(abs(abs(eta1)-abs(eta2)),2) + math.pow(abs(phi1-phi2) if abs(phi1-phi2)<=math.pi else 2*math.pi-abs(phi1-phi2),2))>0.1
function :: deltaR           :: args:=(eta1,eta2,phi1,phi2); lambda:= math.sqrt(math.pow(abs(eta1-eta2),2) + math.pow(abs(phi1-phi2) if abs(phi1-phi2)<=math.pi else 2*math.pi-abs(phi1-phi2),2))
function :: deltaEta           :: args:=(eta1,eta2); lambda:= abs(eta1-eta2)
function :: etaRangeCutLess      :: args:=(x,eta,etaRange,cutInRange,cutOutRange); lambda:= x<cutInRange if abs(eta)<etaRange else x<cutOutRange
function :: etaRangeCutGreater   :: args:=(x,eta,etaRange,cutInRange,cutOutRange); lambda:= x>cutInRange if abs(eta)<etaRange else x>cutOutRange
function :: pairInvMass          :: args:=(pt1,pt2,eta1,eta2,phi1,phi2); lambda:= math.sqrt(2.0*pt1*pt2*(math.cosh(eta1-eta2)-math.cos(phi1-phi2)))
function :: pfJetEtaVeto         :: args:=(Eta); lambda:= abs(Eta)<2.5 or abs(Eta)>3.0

function :: muonQual         :: args:=(Region,Qual); lambda:= 1 if (Region==3 and (Qual == 11 or Qual == 13 or Qual == 14 or Qual == 15)) else (1 if Region<3 else 0)

function :: cleanMuons :: args:=(Region,Eta); lambda:= Region==1 if abs(Eta)<0.9 else (Region==2 if abs(Eta)<1.2 else Region==3)


# Quality requirements for muons and tkelectrons
function :: MuonStaQualCut :: args:=(Qual,Eta); lambda:=Qual>=0 if abs(Eta)<0.9 else (Qual>=12 if abs(Eta)<1.2 else Qual>=0)
#function :: TkElectronIsoQualCut :: args:=(HwQual,Eta); lambda:=HwQual==3 if abs(Eta)>1.479 else HwQual>=0
function :: TkElectronIsoQualCut :: args:=(EleID,Eta); lambda:=EleID if abs(Eta)>1.479 else 1

#Scalings

#HT
function :: Phase1PuppiHT090OfflineEtCut :: args:=(offline); lambda:=(offline-52)/1.16

#MHT
function :: Phase1PuppiMHTOfflineEtCut :: args:=(offline); lambda:=(offline+9.724987)/1.037459

#puppimet
function :: PuppiMET090OfflineEtCut :: args:=(offline); lambda:=(offline-59)/1.49

#EG
function :: EGElectronOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-2.870789)/1.165597 if abs(Eta)<1.5 else (Et>(offline-2.720773)/1.228424)
function :: TkElectronOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-0.617835)/1.182946 if abs(Eta)<1.5 else (Et>(offline-0.336402)/1.275834)
function :: TkIsoElectronOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-0.189054)/1.211045 if abs(Eta)<1.5 else (Et>(offline-0.822056)/1.239274)
function :: TkIsoPhotonOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-2.330926)/1.093568 if abs(Eta)<1.5 else (Et>(offline-4.565565)/1.077261)

## IDs
function :: EGID :: args:=(EleID, SaID, Eta); lambda:=EleID if abs(Eta)<1.5 else SaID
function :: PhoID :: args:=(EleID, PhoID, Eta); lambda:=EleID if abs(Eta)<1.5 else PhoID

#taus
function :: CaloTau090OfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline+1.6)/1.5 if abs(Eta)<1.5 else (Et>(offline+.3)/1.94)
function :: NNTauLoose090OfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline+5.3)/1.8 if abs(Eta)<1.5 else (Et>(offline-8)/1.7)

#puppijet
function :: Phase1PuppiJetOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-15.6)/1.3 if abs(Eta)<1.5 else (Et>(offline-9.6)/1.9 if abs(Eta)<2.4 else (Et>(offline-71)/1.35))

#tkmuons
function :: GMTTkMuonOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-0.903751)/1.039495 if abs(Eta)<0.83 else (Et>(offline-0.894300)/1.044889 if abs(Eta)<1.24 else (Et>(offline-0.796396)/1.040808))


## trigger paths
## -----------------------------------------------------------


trigger  :: L1_SingleTkMu     :: leg1:=(tkGmtMu  , GMTTkMuonOfflineEtCut(22.0,Pt,Eta), abs(Eta)<2.4 ); \

trigger  :: L1_DoubleTkMu     :: leg1:=(tkGmtMu   , GMTTkMuonOfflineEtCut(15.0,Pt,Eta), abs(Eta)<2.4 ); \
				 leg2:=(tkGmtMu   , GMTTkMuonOfflineEtCut(7.0,Pt,Eta), abs(Eta)<2.4, abs(leg1.Z0-Z0)<1 ); \

trigger  :: L1_TripleTkMu    :: leg1:=(tkGmtMu, GMTTkMuonOfflineEtCut(5.0,Pt,Eta), abs(Eta)<2.4 ); \
				leg2:=(tkGmtMu, GMTTkMuonOfflineEtCut(3.0,Pt,Eta), abs(Eta)<2.4, abs(Z0-leg1.Z0)<1 ); \
				leg3:=(tkGmtMu, GMTTkMuonOfflineEtCut(3.0,Pt,Eta), abs(Eta)<2.4, abs(Z0-leg1.Z0)<1 ); \

# e/gamma

trigger  :: L1_SingleTkEle    :: leg1:=(tkElectron , TkElectronOfflineEtCut(36.0,Et,Eta), abs(Eta)<2.4, PassesEleID); \

trigger  :: L1_SingleTkEleIso :: leg1:=(tkElectron , TkIsoElectronOfflineEtCut(28.0,Et,Eta), TkElectronIsoQualCut(PassesEleID,Eta), etaRangeCutLess(TrkIso,Eta,1.479,0.13,0.28)); \

trigger  :: L1_DoubleTkEle    :: leg1:=(tkElectron   , TkElectronOfflineEtCut(25.0,Et,Eta), abs(Eta)<2.4,  PassesEleID); \
				 leg2:=(tkElectron   , TkElectronOfflineEtCut(12.0,Et,Eta), abs(Eta)<2.4,  PassesEleID, abs(zVtx-leg1.zVtx)<1); \

trigger  :: L1_SingleTkPhoIso :: leg1:=(tkPhoton   , TkIsoPhotonOfflineEtCut(36.0,Et,Eta), abs(Eta)<2.4,  PhoID(PassesEleID, PassesPhoID, Eta), etaRangeCutLess(TrkIso,Eta,1.479,0.25,0.205)); \

# Jets
trigger  :: L1_SinglePfJet    :: leg1:=(puppiJet, Phase1PuppiJetOfflineEtCut(230.0,Et,Eta), abs(Eta)<2.4); \


# HT, MET
trigger  :: L1_PFHTT          :: leg1:=(puppiHt , leading>Phase1PuppiHT090OfflineEtCut(450.0)); \


trigger  :: L1_PFMet          :: leg1:=(puppiMet, Et>PuppiMET090OfflineEtCut(200.0)); \

trigger  :: L1_PFHTT_QuadJet  :: leg1:=(puppiHt , leading>Phase1PuppiHT090OfflineEtCut(400.0)); \
				 leg2:=(puppiJet, Phase1PuppiJetOfflineEtCut(70.0,Et,Eta), Et>25.0, abs(Eta)<2.4); \
				 leg3:=(puppiJet, Phase1PuppiJetOfflineEtCut(55.0,Et,Eta), Et>25.0, abs(Eta)<2.4); \
				 leg4:=(puppiJet, Phase1PuppiJetOfflineEtCut(40.0,Et,Eta), Et>25.0, abs(Eta)<2.4); \
				 leg5:=(puppiJet, Phase1PuppiJetOfflineEtCut(40.0,Et,Eta), Et>25.0, abs(Eta)<2.4); \

