#format is like this:
#typeOfParameter :: parameterOrObjectName :: option1=value2; option2=(this,is,a,list)


## general options
## -----------------------------------------------------------
variable :: bundledate       :: v29_16Seeds
variable :: nBunches         :: 2760
variable :: revFreq          :: 11246

#variable :: tiers            :: (variations)
variable :: tiers            :: (thresholds)

variable :: varBins          :: (30,50)
#variable :: varBins          :: (10,20,30,40,50,60,70,80,90,100)
##variable :: varBins          :: (100,140,275,425,575,700,850,1000)
variable :: varError         :: 0.2
variable :: varInterpol      :: linear
variable :: varLeg           :: 1
variable :: varCut           :: 1
variable :: varPrecision     :: 2
variable :: varIterations    :: 5
variable :: useNominalBwF    :: False



## samples (always all samples are used!)
## -----------------------------------------------------------

sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_1.root; tree:=l1PhaseIITree/L1PhaseIITree
sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_2.root; tree:=l1PhaseIITree/L1PhaseIITree
sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_3.root; tree:=l1PhaseIITree/L1PhaseIITree
sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_4.root; tree:=l1PhaseIITree/L1PhaseIITree
sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_5.root; tree:=l1PhaseIITree/L1PhaseIITree
sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_6.root; tree:=l1PhaseIITree/L1PhaseIITree
sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_7.root; tree:=l1PhaseIITree/L1PhaseIITree
sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_8.root; tree:=l1PhaseIITree/L1PhaseIITree
sample   :: neutrinos        :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_9x.root; tree:=l1PhaseIITree/L1PhaseIITree

## tests
#sample   :: neutrinos :: path:=/eos/cms/store/group/dpg_trigger/comm_trigger/L1Trigger/alobanov/phase2/menu/ntuples/CMSSW_12_5_2p1/v29/MinBias_1252_crb_v29_Snap3/230413_214525/0000/L1NtuplePhaseII_Step1_101.root; tree:=l1PhaseIITree/L1PhaseIITree



## physics objects at trigger level
## -----------------------------------------------------------

## Electrons and Photons
object :: EG           :: basebranch:=EG        ; variables:=(Et,Eta,Phi,Iso,zVtx,PassesEleID,PassesSaID,HwQual); \
			 leading:=Et; lengthbranch:=nEG; onToOff:=0

object :: tkElectron   :: basebranch:=tkElectron      ; variables:=(Et,Eta,Phi,TrkIso,zVtx,PassesEleID,HwQual); \
			 leading:=Et; lengthbranch:=nTkElectrons; onToOff:=0

object :: tkPhoton     :: basebranch:=tkPhoton      ; variables:=(Et,Eta,Phi,TrkIso,TrkIsoPV,zVtx,PassesEleID,PassesPhoID,HwQual); \
			 leading:=Et; lengthbranch:=nTkPhotons; onToOff:=0

## Muons
#object :: tkMu          :: basebranch:=tkMuon    ; variables:=(Pt,Eta,Phi,Chg,Iso,TrkIso,Qual,zVtx,MuRefPt,MuRefEta,MuRefPhi,Region,Qual); \
#			    leading:=Pt; lengthbranch:=nTkMuons; onToOff:=0

object :: tkGmtMu          :: basebranch:=gmtTkMuon    ; variables:=(Pt,Eta,Phi,Chg,Iso,Qual,Z0); \
			      leading:=Pt; lengthbranch:=nGmtTkMuons; onToOff:=0

## Taus
object :: puppiTau     :: basebranch:=nnTau     ; variables:=(Et,Eta,Phi,PassLooseNN,PassTightNN); \
			 leading:=Et; lengthbranch:=nNNTaus; onToOff:=0

object :: caloTau      :: basebranch:=caloTau     ; variables:=(Et,Eta,Phi); \
			 leading:=Et; lengthbranch:=nCaloTaus; onToOff:=0

## Jets
object :: puppiJet     :: basebranch:=seededConePuppiJet  ; variables:=(Et,Eta,Phi); \
		   leading:=Et; lengthbranch:=nSeededConePuppiJets; onToOff:=0

object :: puppiHt      :: basebranch:=seededConePuppiHT   ; variables:=(Et=); \
		   leading:=Et; isFlat:=True; fixedIndex:=0; onToOff:=0

object :: puppiMHt      :: basebranch:=seededConePuppiMHT   ; variables:=(Et,Phi); \
		   leading:=Et; isFlat:=True; onToOff:=0

## MET
object :: puppiMet     :: basebranch:=puppiMET    ; variables:=(Et,Phi); \
			 leading:=Et; isFlat:=True; onToOff:=0

## zVtx
object :: puppiVtx     :: basebranch:=z0L1TkPV  ; variables:=(Et=); \
			 leading:=Et; isFlat:=True; onToOff:=0




## function aliases
## -----------------------------------------------------------
function :: notMatched       :: args:=(eta1,eta2,phi1,phi2); lambda:= math.sqrt(math.pow(abs(abs(eta1)-abs(eta2)),2) + math.pow(abs(phi1-phi2) if abs(phi1-phi2)<=math.pi else 2*math.pi-abs(phi1-phi2),2))>0.1
function :: deltaR           :: args:=(eta1,eta2,phi1,phi2); lambda:= math.sqrt(math.pow(abs(eta1-eta2),2) + math.pow(abs(phi1-phi2) if abs(phi1-phi2)<=math.pi else 2*math.pi-abs(phi1-phi2),2))
function :: deltaEta           :: args:=(eta1,eta2); lambda:= abs(eta1-eta2)
function :: etaRangeCutLess      :: args:=(x,eta,etaRange,cutInRange,cutOutRange); lambda:= x<cutInRange if abs(eta)<etaRange else x<cutOutRange
function :: etaRangeCutGreater   :: args:=(x,eta,etaRange,cutInRange,cutOutRange); lambda:= x>cutInRange if abs(eta)<etaRange else x>cutOutRange
function :: pairInvMass          :: args:=(pt1,pt2,eta1,eta2,phi1,phi2); lambda:= math.sqrt(2.0*pt1*pt2*(math.cosh(eta1-eta2)-math.cos(phi1-phi2)))
function :: pfJetEtaVeto         :: args:=(Eta); lambda:= abs(Eta)<2.5 or abs(Eta)>3.0

#Scalings

## HT
## see https://cms-l1t-ph2menu.web.cern.ch/validation/V29/scalings/?match=HT_*perc&depth=1
## 90%
function :: Phase1PuppiHT090OfflineEtCut :: args:=(offline); lambda:=(offline-54.550)/1.087
function :: SeededConePuppiHT090OfflineEtCut :: args:=(offline); lambda:=(offline-47.986)/1.084
## 50%
function :: Phase1PuppiHT050OfflineEtCut :: args:=(offline); lambda:=(offline+6.229)/0.992
function :: SeededConePuppiHT050OfflineEtCut :: args:=(offline); lambda:=(offline+11.651)/0.996


##MHT
## see https://cms-l1t-ph2menu.web.cern.ch/validation/V29/scalings/?match=MHT_*perc&depth=1
## 90%
function :: Phase1PuppiMHT090OfflineEtCut :: args:=(offline); lambda:=(offline-49.175)/1.321
function :: SeededConePuppiMHT090OfflineEtCut :: args:=(offline); lambda:=(offline-55.097)/1.202

## 50%
function :: Phase1PuppiMHT050OfflineEtCut :: args:=(offline); lambda:=(offline+25.367)/1.199
function :: SeededConePuppiMHT050OfflineEtCut :: args:=(offline); lambda:=(offline+20.499)/1.170

##puppimet
## see https://cms-l1t-ph2menu.web.cern.ch/validation/V29/scalings/?match=MET_*perc&depth=1
## 90%
function :: PuppiMET090OfflineEtCut :: args:=(offline); lambda:=(offline-63.781)/1.465
## 50%
function :: PuppiMET050OfflineEtCut :: args:=(offline); lambda:=(offline-5.455)/1.169

#EG
function :: EGElectronOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-2.707)/1.188 if abs(Eta)<1.5 else (Et>(offline-1.572)/1.249)
function :: TkElectronOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-1.441)/1.159 if abs(Eta)<1.5 else (Et>(offline-1.256)/1.217)
function :: TkIsoElectronOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-1.638)/1.144 if abs(Eta)<1.5 else (Et>(offline-1.219)/1.214)
function :: TkIsoPhotonOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-2.697)/1.096 if abs(Eta)<1.5 else (Et>(offline-5.038)/1.067)


## IDs
function :: EGID :: args:=(EleID, SaID, Eta); lambda:=EleID if abs(Eta)<1.5 else SaID
function :: PhoID :: args:=(EleID, PhoID, Eta); lambda:=EleID if abs(Eta)<1.5 else PhoID

#function :: EleIDV2 ::  args:=(Et,Eta,PassesEleID) ; lambda:=PassesEleID if ( Et>25 or abs(Eta)<1.5) else 1
#function :: TkElectronIsoQualCut :: args:=(HwQual,Eta, Et); lambda:=HwQual==3 if (Et>25 and abs(Eta)>1.479) else 1 if (Et<25 and abs(Eta)>1.479) else HwQual>=0

function :: TkEleQualHIGH ::  args:=(Et,Eta,PassesEleID) ; lambda:=PassesEleID
function :: TkEleQualLOW ::  args:=(Et,Eta,PassesEleID) ; lambda:=PassesEleID if (abs(Eta)<1.479) else 1
function :: TkEleIsoQualHIGH :: args:=(Et,Eta,PassesEleID); lambda:= PassesEleID  if (abs(Eta)>1.479) else 1
function :: TkEleIsoQualLOW :: args:=(Et,Eta,PassesEleID); lambda:= (PassesEleID>=0) # this should be always true: we can remove this condition from the menu

#function :: TkElectronIsoQualCut :: args:=(HwQual,Eta); lambda:=HwQual==3 if abs(Eta)>1.479 else HwQual>=0

## taus
## see https://cms-l1t-ph2menu.web.cern.ch/validation/V29/scalings/?match=Tau*perc&depth=1

### BARREL
# ## 50 %
# function :: nnTauOfflineEtCut :: args:=(offline); lambda:=(offline-1.223)/1.083
# function :: caloTauOfflineEtCut :: args:=(offline); lambda:=(offline+8.291)/1.241
# ## 90%
# function :: nnTauOfflineEtCut :: args:=(offline); lambda:=(offline+2.065)/1.899
# function :: caloTauOfflineEtCut :: args:=(offline); lambda:=(offline+2.553)/1.525

# ### ENDCAP
# ## 50%
# function :: nnTauOfflineEtCut :: args:=(offline); lambda:=(offline-2.217)/1.087
# function :: caloTauOfflineEtCut :: args:=(offline); lambda:=(offline+12.821)/1.463

# ## 90%
# function :: nnTauOfflineEtCut :: args:=(offline); lambda:=(offline-19.596)/1.584
# function :: caloTauOfflineEtCut :: args:=(offline); lambda:=(offline+1.273)/1.968

function :: CaloTau090OfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline+2.553)/1.525 if abs(Eta)<1.5 else (Et>(offline+1.273)/1.968)
function :: CaloTau050OfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline+8.291)/1.241 if abs(Eta)<1.5 else (Et>(offline+12.821)/1.463)

function :: NNTauLoose090OfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline+2.065)/1.899 if abs(Eta)<1.5 else (Et>(offline-19.596)/1.584)
function :: NNTauLoose050OfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-1.223)/1.083 if abs(Eta)<1.5 else (Et>(offline-2.217)/1.087)

#puppijet
function :: Phase1PuppiJetOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-15.497)/1.383 if abs(Eta)<1.5 else (Et>(offline-9.362)/1.959 if abs(Eta)<2.4 else (Et>(offline-75.5)/1.41))
function :: SeededConePuppiJetOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>(offline-20.108)/1.308 if abs(Eta)<1.5 else (Et>(offline-7.971)/2.05 if abs(Eta)<2.4 else (Et>(offline-72.567)/1.418))

#tkmuons
function :: GMTTkMuonOfflineEtCut :: args:=(offline,Et,Eta); lambda:=Et>offline if (offline<8)  else Et>(offline-0.986)/1.049 if abs(Eta)<0.83 else (Et>(offline-1.075)/1.052 if abs(Eta)<1.24 else (Et>(offline-0.792)/1.054))

## trigger paths
## -----------------------------------------------------------

## muon

trigger  :: L1_SingleTkMu     :: leg1:=(tkGmtMu  , GMTTkMuonOfflineEtCut(22.0,Pt,Eta), abs(Eta)<2.4 ); \

trigger  :: L1_DoubleTkMu     :: leg1:=(tkGmtMu   , GMTTkMuonOfflineEtCut(15.0,Pt,Eta), abs(Eta)<2.4); \
				                 leg2:=(tkGmtMu   , Pt > 7, abs(Eta)<2.4, abs(leg1.Z0-Z0)<1, Qual > 0); \

trigger  :: L1_TripleTkMu    :: leg1:=(tkGmtMu, Pt>5, abs(Eta)<2.4, Qual>0 ); \
                                leg2:=(tkGmtMu, Pt>3, abs(Eta)<2.4, abs(Z0-leg1.Z0)<1, Qual>0 ); \
                                leg3:=(tkGmtMu, Pt>3, abs(Eta)<2.4, abs(Z0-leg1.Z0)<1, Qual>0 ); \

# e/gamma

trigger  :: L1_SingleTkEle    :: leg1:=(tkElectron , TkElectronOfflineEtCut(36.0,Et,Eta), abs(Eta)<2.4, TkEleQualHIGH(Et,Eta,PassesEleID)); \

trigger  :: L1_SingleTkEleIso :: leg1:=(tkElectron , TkIsoElectronOfflineEtCut(28.0,Et,Eta), TkEleIsoQualLOW(Et,Eta,PassesEleID), etaRangeCutLess(TrkIso,Eta,1.479,0.13,0.28)); \

trigger  :: L1_DoubleTkEle    :: leg1:=(tkElectron   , TkElectronOfflineEtCut(25.0,Et,Eta), abs(Eta)<2.4,  TkEleQualLOW(Et,Eta,PassesEleID) ); \
				  leg2:=(tkElectron   , TkElectronOfflineEtCut(12.0,Et,Eta), abs(Eta)<2.4, TkEleQualLOW(Et,Eta,PassesEleID) , abs(zVtx-leg1.zVtx)<1); \

trigger  :: L1_SingleTkPhoIso :: leg1:=(tkPhoton   , TkIsoPhotonOfflineEtCut(36.0,Et,Eta), abs(Eta)<2.4,  PhoID(PassesEleID, PassesPhoID, Eta), etaRangeCutLess(TrkIso,Eta,1.479,0.25,0.205)); \

trigger  :: L1_TkEleIso_EG    :: leg1:=(tkElectron , TkIsoElectronOfflineEtCut(22.0,Et,Eta), abs(Eta)<2.4,  TkEleIsoQualLOW(Et,Eta,PassesEleID) , etaRangeCutLess(TrkIso,Eta,1.479,0.13,0.28)); \
				  leg2:=(EG         , EGElectronOfflineEtCut(12.0,Et,Eta), abs(Eta)<2.4,  EGID(PassesEleID, PassesSaID, Eta), notMatched(Eta, leg1.Eta, Phi, leg1.Phi)); \

trigger  :: L1_DoubleTkPhoIso  :: leg1:=(tkPhoton   , TkIsoPhotonOfflineEtCut(22.0,Et,Eta), abs(Eta)<2.4, PhoID(PassesEleID, PassesPhoID, Eta), etaRangeCutLess(TrkIso,Eta,1.479,0.25,0.205)); \
				    leg2:=(tkPhoton   , TkIsoPhotonOfflineEtCut(12.0,Et,Eta), abs(Eta)<2.4, PhoID(PassesEleID, PassesPhoID, Eta), etaRangeCutLess(TrkIso,Eta,1.479,0.25,0.205)); \

# tau stuff

trigger  :: L1_PFIsoTau_PFIsoTau  :: leg1:=(puppiTau  , NNTauLoose090OfflineEtCut(52.0,Et,Eta), abs(Eta)<2.172, PassLooseNN>0); \
					  leg2:=(puppiTau  , NNTauLoose090OfflineEtCut(52.0,Et,Eta), abs(Eta)<2.172, PassLooseNN>0, deltaR(Eta, leg1.Eta, Phi, leg1.Phi)>0.5); \

# Jets
trigger  :: L1_SinglePfJet    :: leg1:=(puppiJet, SeededConePuppiJetOfflineEtCut(230.0,Et,Eta), Et>25,  abs(Eta)<2.4); \

# HT, MET
trigger  :: L1_PFHTT          :: leg1:=(puppiHt , leading>SeededConePuppiHT090OfflineEtCut(450.0)); \

trigger  :: L1_PFMet          :: leg1:=(puppiMet, Et>PuppiMET090OfflineEtCut(200.0)); \

trigger  :: L1_PFHTT_QuadJet  :: leg1:=(puppiHt , leading>SeededConePuppiHT090OfflineEtCut(400.0)); \
								leg2:=(puppiJet, SeededConePuppiJetOfflineEtCut(70.0,Et,Eta), Et>25.0, abs(Eta)<2.4); \
								leg3:=(puppiJet, SeededConePuppiJetOfflineEtCut(55.0,Et,Eta), Et>25.0, abs(Eta)<2.4); \
								leg4:=(puppiJet, SeededConePuppiJetOfflineEtCut(40.0,Et,Eta), Et>25.0, abs(Eta)<2.4); \
								leg5:=(puppiJet, SeededConePuppiJetOfflineEtCut(40.0,Et,Eta), Et>25.0, abs(Eta)<2.4); \


# Standalone path: recover efficiency and robustness

trigger  :: L1_SingleEGEle    :: leg1:=(EG , EGElectronOfflineEtCut(51.0,Et,Eta),  abs(Eta)<2.4, EGID(PassesEleID, PassesSaID, Eta)); \

trigger  :: L1_DoubleEGEle    :: leg1:=(EG , EGElectronOfflineEtCut(37.0,Et,Eta),  abs(Eta)<2.4,  EGID(PassesEleID, PassesSaID, Eta) ); \
				  leg2:=(EG , EGElectronOfflineEtCut(24.0,Et,Eta),  abs(Eta)<2.4,  EGID(PassesEleID, PassesSaID, Eta), notMatched(Eta, leg1.Eta, Phi, leg1.Phi)); \

                  
